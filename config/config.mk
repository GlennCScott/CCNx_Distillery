###############################################################################
#
# Distillery default configuration
#
# DO NOT EDIT THIS FILE!!
#
# You can set your user configuration in the file ${HOME}/.ccnx/distilleryr/config.mk
# You can set your local configuration in the file [DISTILLERY]/config/config.mk
# You can use this file as a template. It will be included in the Makefile.
#
# Make will first parse the USER_CONFIG file. Later the LOCAL_CONFIG file.
# Finally the DEFAULT_CONFIG file will be parsed. 
#
# If variables are directly assigned (=), they will override previous definitions
# If variables are conditionally assigned (?=) then the previous value will
# carry.  This default file will use conditional assignments for statements. So
# if the variables are assigned in the USER_CONFIG or LOCAL_CONFIG files they
# will NOT be overriden. Only in the case when a variable is not defined it
# will be defined by this file.
#
# In the most typical situations the USER_CONFIG and LOCAL_CONFIG will use
# direct assignment of variables.
#
# Copyright 2016 Palo Alto Research Center Inc.
# 
###############################################################################

# DISTILLERY_ROOT_DIR=/path/to/root/dir
# This is the root directory of the Distillery distribution. Many other paths depend
# on this. This file assumes that make is being run from the DISTILLERY
# directory. If this is not true, it's convenient to assign the variable at the
# shell.
DISTILLERY_ROOT_DIR?=$(shell pwd)

# This is the root directory where things are built. Currently not all modules
# support being built in a separate directory but we want to have the variable
# ready to switch over to out-of-tree compiles
DISTILLERY_BUILD_DIR?=${DISTILLERY_ROOT_DIR}/build
#DISTILLERY_BUILD_DIR?=${DISTILLERY_ROOT_DIR}

# Directories for the different module categories
FOUNDATION_SOURCE_DIR  =  ${DISTILLERY_ROOT_DIR}/src
FRAMEWORK_SOURCE_DIR   =  ${DISTILLERY_ROOT_DIR}/src
LANGUAGES_SOURCE_DIR   =  ${DISTILLERY_ROOT_DIR}/src
FORWARDER_SOURCE_DIR   =  ${DISTILLERY_ROOT_DIR}/src

# MAKE_BUILD_FLAGS
# Flags to pass to make when building the projects. This is mostly used for
# parallel builds. Disable by setting it to empty
MAKE_BUILD_FLAGS?=-j8

# DISTILLERY_INSTALL_DIR=/path/to/install/dir
# This is the directory where all the ccn software will be installed. This
# directory will be DELETED if you do a make clobber. Do not treat this the
# same way you would treat a system install directory.
DISTILLERY_INSTALL_DIR?=${DISTILLERY_ROOT_DIR}/usr

# DISTILLERY_DEPENDENCIES_DIR=/path/to/dependencies/dir
# This is the path to the dependencies directory. It is used as the base for
# the dependencies install directories. (tools and libraries)
# You should normally not edit this variable.
DISTILLERY_DEPENDENCIES_DIR?=/usr/local/ccnx/dependencies

# DISTILLERY_EXTERN_DIR=/path/to/dependencies/external/install/dir
# This is the directory where the dependencies will be installed. This
# directory is deleted and created as needed by the dependencies system.
# It is used in gravy for includes and linking. This should be for the TARGET
# architecture.
DISTILLERY_EXTERN_DIR?=${DISTILLERY_DEPENDENCIES_DIR}/build
CCNX_DEPENDENCIES?=${DISTILLERY_EXTERN_DIR}
export CCNX_DEPENDENCIES

# DISTILLERY_TOOLS_DIR=/path/to/dependency/tools/dir
# This directory holds some of the tools needed to build libccnx. It should be
# built for the HOST. The directory might be deleted and rebuilt by the
# dependency system. The directory will be included in the execution PATH as
# Distillery builds all the modules. 
DISTILLERY_TOOLS_DIR?=${DISTILLERY_DEPENDENCIES_DIR}/build-tools

# CONFIGURE_CACHE_FILE
# File used by configure to cache results
CONFIGURE_CACHE_FILE?=${DISTILLERY_ROOT_DIR}/.configure.cache

# CONFIGURE_CACHE_FLAG
# This flag is used to cache the values out of configure
CONFIGURE_CACHE_FLAG=--cache-file ${CONFIGURE_CACHE_FILE}

# CONFIGURE_DEBUG_FLAG=--enable-debug
# This flag is added to some configure calls to enable debugging. Basically it
# turns on -g -O0
# To disable redefined it empty
CONFIGURE_DEBUG_FLAG?=--enable-debug

# CONFIGURE_OPENSSL_FLAG
# Flag to pass to configure if we need to define where openssl is
CONFIGURE_OPENSSL_FLAG?=--with-openssl=${DISTILLERY_EXTERN_DIR} 

# CONFIGURE_LIBEVENT_FLAG
# Flag to pass to configure if we need to define where libevent is
CONFIGURE_LIBEVENT_FLAG?=--with-libevent=${DISTILLERY_EXTERN_DIR} 

CONFIGURE_INSTALL_FLAG=INSTALL="/usr/bin/install -C" 

CMAKE_MAKE_TEST_ARGS="ARGS=-j16"

# CONFIGURE_COVERAGE_FLAG
# Flag to pass to configure to enable coverage
#CONFIGURE_COVERAGE_FLAG?=--coverage

# DISABLE_UBUNTU_PACKAGE_CHECK
# This setting disables checking that the ubuntu packages are installed. In the default
# mode the build will fail if the packages are not installed.
# See the related setting DISABLE_UBUNTU_CHECK for system checks.
# NOTE: Any value is considered true!
#DISABLE_UBUNTU_PACKAGE_CHECK=True

# DISABLE_UBUNTU_CHECK
# This setting disables checking that the current system is the supported Ubuntu version
# If you are on Linux, and it's not the supported ubuntu version the build will fail.
# If you disable this setting the build system will not check. (For example if you wanted to build
# on Debian. See the related setting DISABLE_UBUNTU_PACKAGE_CHECK
# NOTE: Any value is considered true!
#DISABLE_UBUNTU_CHECK=True

# FOUNDATION_HOME
# This variable is used by scripts to know where to find the installed
# Foundation libraries and software. 
FOUNDATION_HOME=${DISTILLERY_INSTALL_DIR}

# CCNX_HOME
# These variables are used by scripts to know where to find the installed
# CCNX software and libaries.  They are also used by various packaging scripts.
CCNX_HOME=${DISTILLERY_INSTALL_DIR}


# ENABLE_ALL_MODULES_BY_DEFAULT
# This will be the default value for modules (YES or NO).
# Each module can be customized by setting the corresponding variable 
# ENABLE_<MODULE> to either YES or NO to override the default.
ENABLE_ALL_MODULES_BY_DEFAULT=YES


# ENABLE_<MODULE>
# Enable individual modules. This is useful when you dissable all modules by
# default
#ENABLE_LONGBOW=YES
#ENABLE_LIBPARC=YES
